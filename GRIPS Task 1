{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4822182a",
   "metadata": {},
   "source": [
    "# GRIP : THE SPARKS FOUNDATION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00e943fb",
   "metadata": {},
   "source": [
    "# DATA SCIENCE AND BUSINESS ANALYTICS "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a993b0e",
   "metadata": {},
   "source": [
    "# Name : Rupam Ghosh"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62764d77",
   "metadata": {},
   "source": [
    "# Task 1 : Prediction Using Supervised ML"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a693bb3",
   "metadata": {},
   "source": [
    "### Problem Statement : \n",
    "1) Predict the percentage of a student based on the no. of study hours.\n",
    "\n",
    "2) What will be predicted score if the student studies for 9.25hrs/day?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da2e9925",
   "metadata": {},
   "source": [
    "### Step 1: Import the required Python Libraries "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "8ffc1a94",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn import metrics\n",
    "from warnings import filterwarnings\n",
    "filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bd50835",
   "metadata": {},
   "source": [
    "### Step 2 : Reading the data from given URL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6f44b12f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "07d02954",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours</th>\n",
       "      <th>Scores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.5</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.1</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.2</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.5</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.5</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Hours  Scores\n",
       "0    2.5      21\n",
       "1    5.1      47\n",
       "2    3.2      27\n",
       "3    8.5      75\n",
       "4    3.5      30"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15a3239e",
   "metadata": {},
   "source": [
    "### Step 3: See the Summary of the DataFrame "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d9b5b9c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 25 entries, 0 to 24\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   Hours   25 non-null     float64\n",
      " 1   Scores  25 non-null     int64  \n",
      "dtypes: float64(1), int64(1)\n",
      "memory usage: 528.0 bytes\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f38f31a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Hours     0\n",
       "Scores    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "38aabf0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "## This shows that there are 25 Data in the dataframe and there are no null values in the data set"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3ea682a",
   "metadata": {},
   "source": [
    "### Step 4 : Visualizing the Data and finding the relationship between features and labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0fa06db6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x = 'Hours',y='Scores',data=df)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b23b6c9a",
   "metadata": {},
   "source": [
    "### Step 5 : Divide the data into Attributes and labels "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "eaef9352",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df.iloc[:, :-1].values\n",
    "y = df.iloc[:, 1].values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a39c004",
   "metadata": {},
   "source": [
    "### Step 6 : Split the data into Training and Test sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "381ef6c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test = train_test_split(x,y,test_size=0.25,random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b719ad34",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Check the shape of training the test datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "d8ac2cc8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(18, 1)\n",
      "(7, 1)\n",
      "(18,)\n",
      "(7,)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "print(y_train.shape)\n",
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ae8e937",
   "metadata": {},
   "source": [
    "### Step 7 : Training the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "228d7eff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Succesfully Completed\n"
     ]
    }
   ],
   "source": [
    "lr = LinearRegression()\n",
    "lr.fit(X_train,y_train)\n",
    "print('Training Succesfully Completed')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "7ae486d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept :  1.40547390797785\n",
      "Coefficient :  [10.06755514]\n"
     ]
    }
   ],
   "source": [
    "print('Intercept : ',lr.intercept_)\n",
    "print('Coefficient : ',lr.coef_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01daf68c",
   "metadata": {},
   "source": [
    "### Step 8 : Plotting the Regression line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "067747f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(X_train,y_train)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "794fa367",
   "metadata": {},
   "source": [
    "### Step 9 : Making Predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "fedf6e39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Data in hours\n",
      "  [[1.5]\n",
      " [5.1]\n",
      " [3.3]\n",
      " [3.2]\n",
      " [4.5]\n",
      " [7.4]\n",
      " [1.1]]\n"
     ]
    }
   ],
   "source": [
    "print('Test Data in hours\\n ',X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a62347d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Predicting the scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "dbee0972",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([16.50680661, 52.75000511, 34.62840586, 33.62165035, 46.70947203,\n",
       "       75.90538193, 12.47978456])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = lr.predict(X_test)\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "862aebf3",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Comparing Actual and Predicted Socres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "bf4e1f94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Actual</th>\n",
       "      <th>Predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20</td>\n",
       "      <td>16.506807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>47</td>\n",
       "      <td>52.750005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>42</td>\n",
       "      <td>34.628406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>27</td>\n",
       "      <td>33.621650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>41</td>\n",
       "      <td>46.709472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>69</td>\n",
       "      <td>75.905382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>17</td>\n",
       "      <td>12.479785</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Actual  Predicted\n",
       "0      20  16.506807\n",
       "1      47  52.750005\n",
       "2      42  34.628406\n",
       "3      27  33.621650\n",
       "4      41  46.709472\n",
       "5      69  75.905382\n",
       "6      17  12.479785"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1 = pd.DataFrame({'Actual':y_test,'Predicted':y_pred})\n",
    "df_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "3348bd90",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9518591338051019\n"
     ]
    }
   ],
   "source": [
    "print(lr.score(x,y))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80c7b12e",
   "metadata": {},
   "source": [
    "### Step 10 : Evaluating the Model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "005911d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error :  5.767358910941681\n",
      "Mean Squared Error :  34.880904325600305\n",
      "Root Mean Absolute Error :  5.906005784419814\n"
     ]
    }
   ],
   "source": [
    "print('Mean Absolute Error : ',metrics.mean_absolute_error(y_test,y_pred))\n",
    "print('Mean Squared Error : ',metrics.mean_squared_error(y_test,y_pred))\n",
    "print('Root Mean Absolute Error : ',np.sqrt(metrics.mean_squared_error(y_test,y_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "5749091c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted Score = 94.53035893138195\n"
     ]
    }
   ],
   "source": [
    "hours = [[9.25]]\n",
    "own_pred = lr.predict(hours)\n",
    "print(\"Predicted Score = {}\".format(own_pred[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0214d20",
   "metadata": {},
   "source": [
    "### Conclusion : The Predicted Score of a student studying 9.25hrs/day is 94.53."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
